// ===== SIMPLE CHANGE: Just add this method to your class =====

private formatBusinessNumber(value: number): string {
    if (value === 0) return '0';
    
    const absValue = Math.abs(value);
    const sign = value < 0 ? '-' : '';
    
    // Trillion (1,000,000,000,000+)
    if (absValue >= 1000000000000) {
        const formatted = (absValue / 1000000000000).toFixed(1);
        return sign + (formatted.endsWith('.0') ? formatted.slice(0, -2) : formatted) + 'T';
    }
    
    // Billion (1,000,000,000+)
    if (absValue >= 1000000000) {
        const formatted = (absValue / 1000000000).toFixed(1);
        return sign + (formatted.endsWith('.0') ? formatted.slice(0, -2) : formatted) + 'B';
    }
    
    // Million (1,000,000+)
    if (absValue >= 1000000) {
        const formatted = (absValue / 1000000).toFixed(1);
        return sign + (formatted.endsWith('.0') ? formatted.slice(0, -2) : formatted) + 'M';
    }
    
    // Thousand (1,000+)
    if (absValue >= 1000) {
        const formatted = (absValue / 1000).toFixed(1);
        return sign + (formatted.endsWith('.0') ? formatted.slice(0, -2) : formatted) + 'k';
    }
    
    // Less than 1000 - show as-is with appropriate decimal places
    if (absValue < 1) {
        return sign + absValue.toFixed(3).replace(/\.?0+$/, ''); // Remove trailing zeros
    } else if (absValue < 10) {
        return sign + absValue.toFixed(2).replace(/\.?0+$/, '');
    } else {
        return sign + absValue.toFixed(1).replace(/\.?0+$/, '');
    }
}

// ===== EXACT CHANGE IN YOUR EXISTING CODE =====

// In your drawYAxisLabels method, FIND this line:
// ctx.fillText(yValue.toFixed(2), padding - 10, yPosition + 4);

// REPLACE with:
// ctx.fillText(this.formatBusinessNumber(yValue), padding - 10, yPosition + 4);

// ===== EXAMPLES OF WHAT YOU'll SEE =====
/*
OLD FORMAT:           NEW FORMAT:
0.00        →         0
0.28        →         0.28
1.00        →         1
45.00       →         45
150.00      →         150
1000.00     →         1k
1500.00     →         1.5k
10000.00    →         10k
50000.00    →         50k
600000.00   →         600k
1000000.00  →         1M
60000000.00 →         60M
*/

// ===== COMPLETE UPDATED drawYAxisLabels METHOD =====
// Here's your complete method with just the formatting change:

private drawYAxisLabels(
    ctx: CanvasRenderingContext2D,
    minVal: number,
    maxVal: number,
    scale: number,
    initialY: number,
    padding: number,
    graphTitle: string
): void {
    const adjustedValue = graphTitle.includes(common_lib_label_constants.CONTRIBUTION_TO_BORR) ? 1 : 0.85;
    const step = (maxVal - minVal) / 5;
    for (let i = 0; i <= 5; i++) {
        const yValue = minVal + step * i;
        const yPosition = initialY - (yValue - minVal) * scale * adjustedValue;
        ctx.fillStyle = 'black';
        if (i === 5) {
            this.topmostLabelYPosition = yPosition;
        }
        ctx.font = '12px Arial';
        ctx.textAlign = 'right';
        
        // ===== ONLY THIS LINE CHANGES =====
        ctx.fillText(this.formatBusinessNumber(yValue), padding - 10, yPosition + 4);
        // Was: ctx.fillText(yValue.toFixed(2), padding - 10, yPosition + 4);
    }
}

// ===== ALTERNATIVE: If you want even more compact labels =====
// For extremely tight spaces, use this ultra-compact version:

private formatCompactNumber(value: number): string {
    if (value === 0) return '0';
    
    const absValue = Math.abs(value);
    const sign = value < 0 ? '-' : '';
    
    if (absValue >= 1000000000) return sign + Math.round(absValue / 1000000000) + 'B';
    if (absValue >= 1000000) return sign + Math.round(absValue / 1000000) + 'M';
    if (absValue >= 1000) return sign + Math.round(absValue / 1000) + 'k';
    
    if (absValue < 1) return sign + absValue.toFixed(2).replace(/\.?0+$/, '');
    return sign + Math.round(absValue).toString();
}

// This gives even shorter labels:
// 1500 → 2k (rounded)
// 1200000 → 1M (rounded)
